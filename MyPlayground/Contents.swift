/*
1. –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´Car¬ª –∏ –æ–ø–∏—Å–∞—Ç—å —Å–≤–æ–π—Å—Ç–≤–∞, –æ–±—â–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π, –∞ —Ç–∞–∫–∂–µ –º–µ—Ç–æ–¥ –¥–µ–π—Å—Ç–≤–∏—è.
2. –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ ¬´Car¬ª –∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤ –Ω–∏—Ö –º–µ—Ç–æ–¥—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º: –æ—Ç–∫—Ä—ã—Ç—å/–∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ, –∑–∞–ø—É—Å—Ç–∏—Ç—å/–∑–∞–≥–ª—É—à–∏—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—å –∏ —Ç.–¥. (–ø–æ –æ–¥–Ω–æ–º—É –º–µ—Ç–æ–¥—É –Ω–∞ –¥–µ–π—Å—Ç–≤–∏–µ, —Ä–µ–∞–ª–∏–∑–æ–≤—ã–≤–∞—Ç—å —Å–ª–µ–¥—É–µ—Ç —Ç–æ–ª—å–∫–æ —Ç–µ –¥–µ–π—Å—Ç–≤–∏—è, —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ—Ç–æ—Ä—ã—Ö –æ–±—â–∞—è –¥–ª—è –≤—Å–µ—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π).
3. –°–æ–∑–¥–∞—Ç—å –¥–≤–∞ –∫–ª–∞—Å—Å–∞, –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É—é—â–∏—Ö –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´Car¬ª: tunkCar –∏ sportCar. –û–ø–∏—Å–∞—Ç—å –≤ –Ω–∏—Ö —Å–≤–æ–π—Å—Ç–≤–∞, –æ—Ç–ª–∏—á–∞—é—â–∏–µ—Å—è –¥–ª—è —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è –∏ —Ü–∏—Å—Ç–µ—Ä–Ω—ã.
4. –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ, –∏–º–ø–ª–µ–º–µ–Ω—Ç–∏—Ä—É—é—â–µ–µ –ø—Ä–æ—Ç–æ–∫–æ–ª ¬´CustomStringConvertible¬ª.
5. –°–æ–∑–¥–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±—ä–µ–∫—Ç–æ–≤ –∫–∞–∂–¥–æ–≥–æ –∫–ª–∞—Å—Å–∞. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∫ –Ω–∏–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è.
6. –í—ã–≤–µ—Å—Ç–∏ —Å–∞–º–∏ –æ–±—ä–µ–∫—Ç—ã –≤ –∫–æ–Ω—Å–æ–ª—å.
*/

import Foundation

enum WheelsStatus: String {
    case rotating = "–≤—Ä–∞—â–∞—é—Ç—Å—è", standing = "–Ω–µ –≤—Ä–∞—â–∞—é—Ç—Å—è"
    static func setRandomWheelsStatus() -> WheelsStatus {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .rotating
        case 2:
            return .standing
        default:
            return .setRandomWheelsStatus()
        }
    }
}
enum DoorsStatus: String {
    case opened = "–æ—Ç–∫—Ä—ã—Ç—ã", closed = "–∑–∞–∫—Ä—ã—Ç—ã"
    static func setRandomDoorsStatus() -> DoorsStatus {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .closed
        case 2:
            return .opened
        default:
            return .setRandomDoorsStatus()
        }
    }
}
enum EngineStatus: String {
    case on = "–≤–∫–ª—é—á—ë–Ω", off = "–≤—ã–∫–ª—é—á–µ–Ω"
    static func setRandomEngineStatus() -> EngineStatus {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .off
        case 2:
            return .on
        default:
            return .setRandomEngineStatus()
        }
    }
}
enum WindowsStatus: String {
    case opened = "–æ—Ç–∫—Ä—ã—Ç—ã", closed = "–∑–∞–∫—Ä—ã—Ç—ã"
    static func setRandomWindowsStatus() -> WindowsStatus {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .closed
        case 2:
            return .opened
        default:
            return .setRandomWindowsStatus()
        }
    }
}
enum TunkStatus: String {
    case full = "–ø–æ–ª–Ω—ã–π", empty = "–ø—É—Å—Ç–æ–π"
    static func setRandomTrunkStatus() -> TunkStatus {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .empty
        case 2:
            return .full
        default:
            return .setRandomTrunkStatus()
        }
    }
}
enum HoodStatus: String {
    case opened = "–æ—Ç–∫—Ä—ã—Ç", closed = "–∑–∞–∫—Ä—ã—Ç"
    static func setRandomHoodStatus() -> HoodStatus {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .closed
        case 2:
            return .opened
        default:
            return .setRandomHoodStatus()
        }
    }
}
enum BodyColor: Character {
    case whit–µ = "‚ö™", black = "‚ö´", blue = "üîµ", green = "üü¢", red = "üî¥", brown = "üü§", yellow = "üü°"
    static func setRandomBodyColor() -> BodyColor {
        let random = Int.random(in: 1...7)
        switch random {
        case 1:
            return .black
        case 2:
            return .blue
        case 3:
            return .brown
        case 4:
            return .green
        case 5:
            return .red
        case 6:
            return .whit–µ
        case 7:
            return .yellow
        default:
            return .setRandomBodyColor()
        }
    }
}
enum SteeringWheelPosition: String {
    case left = "—Å–ª–µ–≤–∞", right = "—Å–ø—Ä–∞–≤–∞"
    static func setRandomSteeringWheelPositon() -> SteeringWheelPosition {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .left
        case 2:
            return .right
        default:
            return .setRandomSteeringWheelPositon()
        }
    }
}
enum VehicleType: String {
    case sportscar = "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–π üèé", truckcar  = "–≥—Ä—É–∑–æ–≤–æ–π-—Ü–∏—Å—Ç–µ—Ä–Ω–∞ üöõ"
    static func setRandomVehicleType() -> VehicleType {
        let random = Int.random(in: 1...2)
        switch random {
        case 1:
            return .sportscar
        case 2:
            return .truckcar
        default:
            return .setRandomVehicleType()
        }
    }
}
enum EngineType: String {
    case gasoline = "–±–µ–Ω–∑–∏–Ω–æ–≤—ã–π", diesel = "–¥–∏–∑–µ–ª—å–Ω—ã–π", electric = "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
    static func setRandomEngineType() -> EngineType {
        let random = Int.random(in: 1...3)
        switch random {
        case 1:
            return .diesel
        case 2:
            return .electric
        case 3:
            return .gasoline
        default:
            return .setRandomEngineType()
        }
    }
}
enum Driver: Character {
    case chicken = "üêî", heron = "ü¶©", swan = "ü¶¢", linux = "üêß", parrot = "ü¶ú", eagle = "ü¶Ö", owl = "ü¶â", duck = "ü¶Ü"
    static func setRandomDriver() -> Driver {
        let random = Int.random(in: 1...8)
        switch random {
        case 1:
            return .chicken
        case 2:
            return .duck
        case 3:
            return .eagle
        case 4:
            return .heron
        case 5:
            return .linux
        case 6:
            return .owl
        case 7:
            return .parrot
        case 8:
            return .swan
        default:
            return .setRandomDriver()
        }
    }
}

extension Double {
    var roundTo: Double { (self * 100).rounded() / 100 }
}

func setEnginePower() -> Int {
    let enginePower = Int.random(in: 400...700)
    return enginePower
}
func SetCarMileage() -> Double {
    let carMileage = Double.random(in: 5697.464864...69541.65463)
    return carMileage
}
func SetFuelConsumption() -> Double {
    let fuelConsumption = Double.random(in: 21.156846...42.654664)
    return fuelConsumption
}
func SetReleaseYear() -> Int {
    let releaseYear = Int.random(in: 2010...2020)
    return releaseYear
}
func SetNumberOfCylinders() -> Int? {
    let cylindersArray = [4, 6, 8, 12]
    let numberOfCylinders = cylindersArray.randomElement()
    return numberOfCylinders!
}
func SetProducingCountry() -> String? {
    let producingCountryArray = ["–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™", "–†–æ—Å—Å–∏—è üá∑üá∫", "–®–≤–µ—Ü–∏—è üá∏üá™", "–°–®–ê üá∫üá∏", "–§—Ä–∞–Ω—Ü–∏—è üá´üá∑", "–ò—Ç–∞–ª–∏—è üáÆüáπ", "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß"]
    let producingCountry = producingCountryArray.randomElement()
    return producingCountry
}
func SetNumberOfWheels() -> Int? {
    let numberOfWheelsArray = [4, 6]
    let numberOfWheels = numberOfWheelsArray.randomElement()
    return numberOfWheels
}
func SetNumberOfWindows() -> Int? {
    let numbersOfWindowsArray = [4, 6, 8]
    let numbersOfWindows = numbersOfWindowsArray.randomElement()
    return numbersOfWindows
}
func SetNumberOfDoors() -> Int? {
    let numberOfDoorsArray = [2, 4]
    let numberOfDoors = numberOfDoorsArray.randomElement()
    return numberOfDoors
}

protocol Car {
    var wheels: Int { get set }
    var doors: Int { get set }
    var enginetype: EngineType { get set }
    var windows: Int { get set }
    var enginePower: Int { get set }
    var numberOfCylinders: Int { get set }
    var fuelConsumption: Double { get set }
    var producingCountry: String { get set }
    var releaseYear: Int { get set }
    var carMileage: Double { get set }
    var driver: Driver { get set }
    var steeringWheelPosition: SteeringWheelPosition { get set }
    var wheelsStatus: WheelsStatus { get set }
    var doorsStatus: DoorsStatus { get set }
    var engineStatus: EngineStatus { get set }
    var windowsStatus: WindowsStatus  { get set }
    var hoodStatus: HoodStatus  { get set }
    var bodyColor: BodyColor { get set }
    var vehicleType: VehicleType { get set }
    
    func printSpecificatios()
}

extension Car {
    mutating func changeWheelsStatus(){
        switch self.wheelsStatus {
        case .rotating:
            print("–ö–æ–ª–µ—Å–∞ –Ω–µ –≤—Ä–∞—â–∞—é—Ç—Å—è\n")
            self.wheelsStatus = .standing
        case.standing:
            print("–ö–æ–ª—ë—Å–∞ –≤—Ä–∞—â–∞—é—Ç—Å—è\n")
            self.wheelsStatus = .rotating
        }
    }
    mutating func changeDoorsStatus() {
        switch self.doorsStatus {
        case .closed:
            print("–î–≤–µ—Ä–∏ –æ—Ç–∫—Ä—ã—Ç—ã\n")
            self.doorsStatus = .opened
        case .opened:
            print("–î–≤–µ—Ä–∏ –∑–∞–∫—Ä—ã—Ç—ã\n")
            self.doorsStatus = .closed
        }
    }
    mutating func changeEngineStatus() {
        switch self.engineStatus {
        case .off:
            print("–î–≤–∏–≥–∞—Ç–µ–ª—å –≤–∫–ª—é—á—ë–Ω\n")
            self.engineStatus = .on
        case .on:
            print("–î–≤–∏–≥–∞—Ç–µ–ª—å –≤—ã–∫–ª—é—á–µ–Ω\n")
            self.engineStatus = .off
        }
    }
    mutating func changeWindowsStatus() {
        switch self.windowsStatus {
        case .closed:
            print("–û–∫–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã\n")
            self.windowsStatus = .opened
        case .opened:
            print("–û–∫–Ω–∞ –∑–∞–∫—Ä—ã—Ç—ã\n")
            self.windowsStatus = .closed
        }
    }
    mutating func changeHoodStatus() {
        switch self.hoodStatus {
        case .closed:
            print("–ö–∞–ø–æ—Ç –æ—Ç–∫—Ä—ã—Ç\n")
            self.hoodStatus = .opened
        case .opened:
            print("–ö–∞–ø–æ—Ç –∑–∞–∫—Ä—ã—Ç\n")
            self .hoodStatus = .closed
        }
    }
}

class TunkCar: Car {
    var wheels: Int
    var doors: Int
    var enginetype: EngineType
    var windows: Int
    var enginePower: Int
    var numberOfCylinders: Int
    var fuelConsumption: Double
    var producingCountry: String
    var releaseYear: Int
    var carMileage: Double
    var driver: Driver
    var steeringWheelPosition: SteeringWheelPosition
    var vehicleType: VehicleType
    var wheelsStatus: WheelsStatus {
        willSet {
            if newValue == .rotating {
                print("–ö–æ–ª—ë—Å–∞ –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç –≤—Ä–∞—â–µ–Ω–∏–µ\n")
            } else {
                print("–ö–æ–ª—ë—Å–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –≤—Ä–∞—â–µ–Ω–∏–µ\n")
            }
        }
    }
    var doorsStatus: DoorsStatus {
        willSet {
            if newValue == .closed {
                print("–î–≤–µ—Ä–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            } else {
                print("–î–≤–µ—Ä–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var engineStatus: EngineStatus {
        willSet {
            if newValue == .off {
                print("–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è\n")
            } else {
                print("–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var windowsStatus: WindowsStatus  {
        willSet {
            if newValue == .closed {
                print("–û–∫–Ω–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            } else {
                print("–û–∫–Ω–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var hoodStatus: HoodStatus {
        willSet {
            if newValue == .closed {
                print("–ö–∞–ø–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            } else {
                print("–ö–∞–ø–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var bodyColor: BodyColor
    init(wheels: Int, doors: Int, enginetype: EngineType, windows: Int, producingCountry: String, releaseYear: Int, carMileage: Double, driver: Driver, steeringWheelPosition: SteeringWheelPosition, vehicleType: VehicleType, wheelsStatus: WheelsStatus, doorsStatus: DoorsStatus, engineStatus: EngineStatus, windowsStatus: WindowsStatus, enginePower: Int, numberOfCylinders: Int, fuelConsumption: Double, hoodStatus: HoodStatus, bodyColor: BodyColor) {
        self.wheels = wheels
        self.doors = doors
        self.enginetype = enginetype
        self.windows = windows
        self.enginePower = enginePower
        self.numberOfCylinders = numberOfCylinders
        self.fuelConsumption = fuelConsumption
        self.producingCountry = producingCountry
        self.releaseYear = releaseYear
        self.carMileage = carMileage
        self.driver = driver
        self.steeringWheelPosition = steeringWheelPosition
        self.vehicleType = vehicleType
        self.wheelsStatus = wheelsStatus
        self.doorsStatus = doorsStatus
        self.engineStatus = engineStatus
        self.windowsStatus = windowsStatus
        self.hoodStatus = hoodStatus
        self.bodyColor = bodyColor
    }
    func printSpecificatios() {
        print("""

        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –í–æ–¥–∏—Ç–µ–ª—å: \(driver.rawValue)
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª—ë—Å: \(wheels) —à—Ç.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π: \(doors) —à—Ç.
        –î–≤–∏–≥–∞—Ç–µ–ª—å: \(enginetype.rawValue)
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: \(numberOfCylinders) —à—Ç.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω: \(windows) —à—Ç.
        –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(enginePower) –ª.—Å.
        –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: \(fuelConsumption) –ª./100 –∫–º.
        –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä—É–ª—è: \(steeringWheelPosition.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry)
        –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(releaseYear)
        –ü—Ä–æ–±–µ–≥: \(carMileage) –∫–º.

        –ö–æ–ª—ë—Å–∞: \(wheelsStatus.rawValue)
        –î–≤–µ—Ä–∏: \(doorsStatus.rawValue)
        –î–≤–∏–≥–∞—Ç–µ–ª—å: \(engineStatus.rawValue)
        –û–∫–Ω–∞: \(windowsStatus.rawValue)
        –ö–∞–ø–æ—Ç: \(hoodStatus.rawValue)
        –¶–≤–µ—Ç –∫—É–∑–æ–≤–∞: \(bodyColor.rawValue)
        """)
    }
}

class SportsCar: Car {
    var wheels: Int
    var doors: Int
    var enginetype: EngineType
    var windows: Int
    var enginePower: Int
    var numberOfCylinders: Int
    var fuelConsumption: Double
    var producingCountry: String
    var releaseYear: Int
    var carMileage: Double
    var driver: Driver
    var steeringWheelPosition: SteeringWheelPosition
    var vehicleType: VehicleType
    var wheelsStatus: WheelsStatus {
        willSet {
            if newValue == .rotating {
                print("–ö–æ–ª—ë—Å–∞ –ø—Ä–µ–∫—Ä–∞—â–∞—é—Ç –≤—Ä–∞—â–µ–Ω–∏–µ\n")
            } else {
                print("–ö–æ–ª—ë—Å–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –≤—Ä–∞—â–µ–Ω–∏–µ\n")
            }
        }
    }
    var doorsStatus: DoorsStatus {
        willSet {
            if newValue == .closed {
                print("–î–≤–µ—Ä–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            } else {
                print("–î–≤–µ—Ä–∏ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var engineStatus: EngineStatus {
        willSet {
            if newValue == .off {
                print("–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å—Å—è\n")
            } else {
                print("–î–≤–∏–≥–∞—Ç–µ–ª—å –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var windowsStatus: WindowsStatus  {
        willSet {
            if newValue == .closed {
                print("–û–∫–Ω–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            } else {
                print("–û–∫–Ω–∞ –Ω–∞—á–∏–Ω–∞—é—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var hoodStatus: HoodStatus {
        willSet {
            if newValue == .closed {
                print("–ö–∞–ø–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            } else {
                print("–ö–∞–ø–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç –∑–∞–∫—Ä—ã–≤–∞—Ç—å—Å—è\n")
            }
        }
    }
    var bodyColor: BodyColor
    init(wheels: Int, doors: Int, enginetype: EngineType, windows: Int, producingCountry: String, releaseYear: Int, carMileage: Double, driver: Driver, steeringWheelPosition: SteeringWheelPosition, vehicleType: VehicleType, wheelsStatus: WheelsStatus, doorsStatus: DoorsStatus, engineStatus: EngineStatus, windowsStatus: WindowsStatus, enginePower: Int, numberOfCylinders: Int, fuelConsumption: Double, hoodStatus: HoodStatus, bodyColor: BodyColor) {
        self.wheels = wheels
        self.doors = doors
        self.enginetype = enginetype
        self.windows = windows
        self.enginePower = enginePower
        self.numberOfCylinders = numberOfCylinders
        self.fuelConsumption = fuelConsumption
        self.producingCountry = producingCountry
        self.releaseYear = releaseYear
        self.carMileage = carMileage
        self.driver = driver
        self.steeringWheelPosition = steeringWheelPosition
        self.vehicleType = vehicleType
        self.wheelsStatus = wheelsStatus
        self.doorsStatus = doorsStatus
        self.engineStatus = engineStatus
        self.windowsStatus = windowsStatus
        self.hoodStatus = hoodStatus
        self.bodyColor = bodyColor
    }
    func printSpecificatios() {
        print("""

        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –í–æ–¥–∏—Ç–µ–ª—å: \(driver.rawValue)
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª—ë—Å: \(wheels) —à—Ç.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–µ—Ä–µ–π: \(doors) —à—Ç.
        –î–≤–∏–≥–∞—Ç–µ–ª—å: \(enginetype.rawValue)
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–∏–ª–∏–Ω–¥—Ä–æ–≤: \(numberOfCylinders) —à—Ç.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω: \(windows) —à—Ç.
        –ú–æ—â–Ω–æ—Å—Ç—å –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(enginePower) –ª.—Å.
        –†–∞—Å—Ö–æ–¥ —Ç–æ–ø–ª–∏–≤–∞: \(fuelConsumption) –ª./100 –∫–º.
        –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä—É–ª—è: \(steeringWheelPosition.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry)
        –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: \(releaseYear)
        –ü—Ä–æ–±–µ–≥: \(carMileage) –∫–º.

        –ö–æ–ª—ë—Å–∞: \(wheelsStatus.rawValue)
        –î–≤–µ—Ä–∏: \(doorsStatus.rawValue)
        –î–≤–∏–≥–∞—Ç–µ–ª—å: \(engineStatus.rawValue)
        –û–∫–Ω–∞: \(windowsStatus.rawValue)
        –ö–∞–ø–æ—Ç: \(hoodStatus.rawValue)
        –¶–≤–µ—Ç –∫—É–∑–æ–≤–∞: \(bodyColor.rawValue)
        """)
    }
}

extension TunkCar: CustomStringConvertible {
    var description: String {
        return """

        –≠—Ç–æ –∫–ª–∞—Å—Å TunkCar, –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –æ—Ç 1 –¥–æ 10 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∞ –∑–∞—Ç–µ–º –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏—Å—á–µ–∑–Ω—É—Ç—å.
        
        """
    }
}


extension SportsCar: CustomStringConvertible {
    var description: String {
        return """

        –≠—Ç–æ –∫–ª–∞—Å—Å SportsCar, –∑–¥–µ—Å—å –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–æ –æ—Ç 1 –¥–æ 10 —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤ —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏, –∞ –∑–∞—Ç–µ–º –≤ —Å–ª—É—á–∞–π–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –∏—Å—á–µ–∑–Ω—É—Ç—å.
        
        """
    }
}

var arraySportsCar:Array<SportsCar> = []
var startCountSportsCar = 0
var endCountSportsCar = Int.random(in: 1...10)
repeat {
    let sportsCar = SportsCar(wheels: SetNumberOfWheels()!, doors: SetNumberOfDoors()!, enginetype: .setRandomEngineType(), windows: SetNumberOfWindows()!, producingCountry: SetProducingCountry()!, releaseYear: SetReleaseYear(), carMileage: SetCarMileage().roundTo, driver: .setRandomDriver(), steeringWheelPosition: .setRandomSteeringWheelPositon(), vehicleType: .sportscar, wheelsStatus: .setRandomWheelsStatus(), doorsStatus: .setRandomDoorsStatus(), engineStatus: .setRandomEngineStatus(), windowsStatus: .setRandomWindowsStatus(), enginePower: setEnginePower(), numberOfCylinders: SetNumberOfCylinders()!, fuelConsumption: SetFuelConsumption().roundTo, hoodStatus: .setRandomHoodStatus(), bodyColor: .setRandomBodyColor())
    arraySportsCar.append(sportsCar)
    startCountSportsCar += 1
} while startCountSportsCar < endCountSportsCar

var arrayTunkCar:Array<TunkCar> = []
var startCountTunkCar = 0
var endCountTunkCar = Int.random(in: 1...10)
repeat {
    let tunkCar = TunkCar(wheels: SetNumberOfWheels()!, doors: SetNumberOfDoors()!, enginetype: .setRandomEngineType(), windows: SetNumberOfWindows()!, producingCountry: SetProducingCountry()!, releaseYear: SetReleaseYear(), carMileage: SetCarMileage().roundTo, driver: .setRandomDriver(), steeringWheelPosition: .setRandomSteeringWheelPositon(), vehicleType: .truckcar, wheelsStatus: .setRandomWheelsStatus(), doorsStatus: .setRandomDoorsStatus(), engineStatus: .setRandomEngineStatus(), windowsStatus: .setRandomWindowsStatus(), enginePower: setEnginePower(), numberOfCylinders: SetNumberOfCylinders()!, fuelConsumption: SetFuelConsumption().roundTo, hoodStatus: .setRandomHoodStatus(), bodyColor: .setRandomBodyColor())
    arrayTunkCar.append(tunkCar)
    startCountTunkCar += 1
} while startCountTunkCar < endCountTunkCar

var sportsCarCount = 0
var tunkCarCount = 0
func makeCars() {
    print(arraySportsCar[0].description)
    sleep(5)
    for _ in arraySportsCar {
        arraySportsCar[sportsCarCount].printSpecificatios()
        arraySportsCar[sportsCarCount].changeWheelsStatus()
        arraySportsCar[sportsCarCount].changeDoorsStatus()
        arraySportsCar[sportsCarCount].changeEngineStatus()
        arraySportsCar[sportsCarCount].changeWindowsStatus()
        arraySportsCar[sportsCarCount].changeHoodStatus()
        sportsCarCount += 1
    }
    print(arrayTunkCar[0].description)
    sleep(5)
    for _ in arrayTunkCar {
        arrayTunkCar[tunkCarCount].printSpecificatios()
        arrayTunkCar[tunkCarCount].changeWheelsStatus()
        arrayTunkCar[tunkCarCount].changeDoorsStatus()
        arrayTunkCar[tunkCarCount].changeEngineStatus()
        arrayTunkCar[tunkCarCount].changeWindowsStatus()
        arrayTunkCar[tunkCarCount].changeHoodStatus()
        tunkCarCount += 1
    }
    print("–ë—ã–ª–æ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ \(arraySportsCar.count - 1) —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –∏ \(arrayTunkCar.count - 1) –≥—Ä—É–∑–æ–≤—ã—Ö.")
}

func destroyCars() {
   
    if arraySportsCar.isEmpty {
        print("\n–ù–∏ –æ–¥–Ω–æ–π —Å–ø–æ—Ä—Ç–∏–≤–Ω–æ–π –º–∞—à–∏–Ω—ã –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ!")
    } else {
        for _ in arraySportsCar {
            let sportCarDestroyer = Int.random(in: 0..<arraySportsCar.count)
            arraySportsCar.remove(at: sportCarDestroyer)
            if arraySportsCar.isEmpty {
                print("\n–í—Å–µ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.")
            } else {
                if arraySportsCar.count - 1 == 0 {
                    print ("\n–£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ç–∞—á–∫—É!")
                } else {
                    print("\n–£–Ω–∏—á—Ç–æ–∂–∞–µ–º 1 –ª—é–±—É—é —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ç–∞—á–∫—É...")
                    if arraySportsCar.count - 1 != 0 {
                        print("–û—Å—Ç–∞–ª–æ—Å—å \(arraySportsCar.count - 1) —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
                    }
                }
            }
        }
    }

    if arrayTunkCar.isEmpty {
        print("–ù–∏ –æ–¥–Ω–æ–≥–æ –≥—Ä—É–∑–æ–≤–∏–∫–∞ –Ω–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–æ!")
    } else {
        for _ in arrayTunkCar {
            let tunkCarDestroyer = Int.random(in: 0..<arrayTunkCar.count)
            arrayTunkCar.remove(at: tunkCarDestroyer)
            if arrayTunkCar.isEmpty {
                print("\n–í—Å–µ –≥—Ä—É–∑–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ —É–Ω–∏—á—Ç–æ–∂–µ–Ω—ã.")
            } else {
                if arrayTunkCar.count - 1 == 0 {
                    print("\n–£–Ω–∏—á—Ç–æ–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥—Ä—É–∑–æ–≤–∏–∫!")
                } else {
                    print("\n–£–Ω–∏—á—Ç–æ–∂–∞–µ–º 1 –ª—é–±–æ–π –≥—Ä—É–∑–æ–≤–∏–∫...")
                    if arrayTunkCar.count - 1 != 0 {
                        print("–û—Å—Ç–∞–ª–æ—Å—å \(arrayTunkCar.count - 1) –≥—Ä—É–∑–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.")
                    }
                }
            }
        }
    }
}

makeCars()
destroyCars()
