//    1. –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —Å–≤–æ–π —Ç–∏–ø –∫–æ–ª–ª–µ–∫—Ü–∏–∏ ¬´–æ—á–µ—Ä–µ–¥—å¬ª (queue) c –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –¥–∂–µ–Ω–µ—Ä–∏–∫–æ–≤.
//    2. –î–æ–±–∞–≤–∏—Ç—å –µ–º—É –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Ç–æ–¥–æ–≤ –≤—ã—Å—à–µ–≥–æ –ø–æ—Ä—è–¥–∫–∞, –ø–æ–ª–µ–∑–Ω—ã—Ö –¥–ª—è —ç—Ç–æ–π –∫–æ–ª–ª–µ–∫—Ü–∏–∏ (–ø—Ä–∏–º–µ—Ä: filter –¥–ª—è –º–∞—Å—Å–∏–≤–æ–≤)
//    3. * –î–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π subscript, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å nil –≤ —Å–ª—É—á–∞–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º—É –∏–Ω–¥–µ–∫—Å—É.
//
//    –ù–∞—à—ë–ª –∫–ª–∞—Å—Å–Ω—ã–π —à–æ—Ä—Ç–∫–∞—Ç cmd + / -- –∑–∞–∫–æ–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–∫ –∫–æ–¥–∞ :)

import Foundation

enum VehicleType: String {
    case motorcycle = "–ú–æ—Ç–æ—Ü–∏–∫–ª üèç"
    case passangercar = "–õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å üöó"
    case truckCar = "–ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å üöö"
    case plane = "–°–∞–º–æ–ª–µ—Ç üõ©"
    case ship = "–ö–æ—Ä–∞–±–ª—å üõ≥"
    case locomotive = "–≠–ª–µ–∫—Ç—Ä–æ–≤–æ–∑ üöÇ"
    static func setRandomVehicleType() -> VehicleType {
        let randomVehicleType = Int.random(in: 1...6)
        switch randomVehicleType {
        case 1:
            return .motorcycle
        case 2:
            return .passangercar
        case 3:
            return .truckCar
        case 4:
            return .plane
        case 5:
            return .ship
        case 6:
            return .locomotive
        default:
            return setRandomVehicleType()
        }
    }
}

enum EngineType: String {
    case gasoline = "–±–µ–Ω–∑–∏–Ω–æ–≤—ã–π"
    case diesel = "–¥–∏–∑–µ–ª—å–Ω—ã–π"
    case nuclear = "—è–¥–µ—Ä–Ω–æ–µ —Ç–æ–ø–ª–∏–≤–æ"
    case electric = "—ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–π"
    case jet = "—Ä–µ–∞–∫—Ç–∏–≤–Ω—ã–π"
    static func setRandomEngineType() -> EngineType {
        let randomEngineType = Int.random(in: 1...5)
        switch randomEngineType {
        case 1:
            return .gasoline
        case 2:
            return .diesel
        case 3:
            return .nuclear
        case 4:
            return .electric
        case 5:
            return .jet
        default:
            return setRandomEngineType()
        }
    }
}

enum ProducingCountry: String {
    case germany = "–ì–µ—Ä–º–∞–Ω–∏—è üá©üá™"
    case russia = "–†–æ—Å—Å–∏—è üá∑üá∫"
    case sweeden = "–®–≤–µ—Ü–∏—è üá∏üá™"
    case usa = "–°–®–ê üá∫üá∏"
    case france = "–§—Ä–∞–Ω—Ü–∏—è üá´üá∑"
    case italy = "–ò—Ç–∞–ª–∏—è üáÆüáπ"
    case gb = "–í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è üá¨üáß"
    static func setRandomProducingCountry() -> ProducingCountry {
        let randomProducingCountry = Int.random(in: 1...7)
        switch randomProducingCountry {
        case 1:
            return .germany
        case 2:
            return .russia
        case 3:
            return .sweeden
        case 4:
            return .usa
        case 5:
            return .france
        case 6:
            return .italy
        case 7:
            return .gb
        default:
            return setRandomProducingCountry()
        }
    }
}

enum BodyColor: String {
    case whit–µ = "–±–µ–ª—ã–π ‚ö™"
    case black = "—á–µ—Ä–Ω—ã–π ‚ö´"
    case blue = "—Å–∏–Ω–∏–π üîµ"
    case green = "–∑–µ–ª–µ–Ω—ã–π üü¢"
    case red = "–∫—Ä–∞—Å–Ω—ã–π üî¥"
    case brown = "–∫–æ—Ä–∏—á–Ω–µ–≤—ã–π üü§"
    case yellow = "–∂–µ–ª—Ç—ã–π üü°"
    case silver = "—Å–µ—Ä–µ–±—Ä–∏—Å—Ç—ã–π üîò"
    static func setRandomBodyColor() -> BodyColor {
        let randomBodyColor = Int.random(in: 1...8)
        switch randomBodyColor {
        case 1:
            return .whit–µ
        case 2:
            return .black
        case 3:
            return .blue
        case 4:
            return .green
        case 5:
            return .red
        case 6:
            return .brown
        case 7:
            return .yellow
        case 8:
            return .silver
        default:
            return setRandomBodyColor()
        }
    }
}

enum EngineLayout: String {
    case front = "—Å–ø–µ—Ä–µ–¥–∏"
    case middle = "–ø–æ—Å–µ—Ä–µ–¥–∏–Ω–µ"
    case rear = "—Å–∑–∞–¥–∏"
    static func setRandomEngineLayout() -> EngineLayout {
        let randomEngineLayout = Int.random(in: 1...3)
        switch randomEngineLayout {
        case 1:
            return .front
        case 2:
            return .middle
        case 3:
            return .rear
        default:
            return setRandomEngineLayout()
        }
    }
}

enum Voltage: String {
    case ac = "–ø–µ—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫, 25 –∫–í."
    case dc = "–ø–æ—Å—Ç–æ—è–Ω–Ω—ã–π —Ç–æ–∫, 3 –∫–í."
    static func setRandomVoltage() -> Voltage {
        let randomVoltage = Int.random(in: 1...2)
        switch randomVoltage {
        case 1:
            return .ac
        case 2:
            return .dc
        default:
            return setRandomVoltage()
        }
    }
}

enum TrackWidth: String {
    case europe = "1435"
    case russia = "1520"
    static func setRandomTrackWidth() -> TrackWidth {
        let randomTrackWidth = Int.random(in: 1...2)
        switch randomTrackWidth {
        case 1:
            return .europe
        case 2:
            return .russia
        default:
            return setRandomTrackWidth()
        }
    }
}

extension Double {
     var roundTo: Double { (self * 100).rounded() / 100 }
 }

extension Collection {
    subscript(safe index: Index) -> Element? {
        return safeIndex(at: index)
    }
    func safeIndex(at index: Index) -> Element? {
        return indices.contains(index) ? self[index]: nil
    }
}

protocol Weightable {
    var weight: Double { get set }
}

protocol Vehicle: Weightable {
    var vehicleType: VehicleType { get set }
    var engineType: EngineType { get set }
    var producingCountry: ProducingCountry { get set }
    var bodyColor: BodyColor { get set }
    func printDesctiption()
}

class Motorcycle: Vehicle {
    var vehicleType: VehicleType
    var engineType: EngineType
    var producingCountry: ProducingCountry
    var bodyColor: BodyColor
    var weight: Double
    var accelerationTime: Double
    var maxRpm: Int
    init(vehicleType: VehicleType, engineType: EngineType, producingCountry: ProducingCountry, bodyColor: BodyColor, weight: Double, accelerationTime: Double, maxRpm: Int ) {
        self.vehicleType = vehicleType
        self.engineType = engineType
        self.producingCountry = producingCountry
        self.bodyColor = bodyColor
        self.weight = weight
        self.accelerationTime = accelerationTime
        self.maxRpm = maxRpm
    }
    func printDesctiption() {
        print("""
        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(engineType.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry.rawValue)
        –¶–≤–µ—Ç —Ä–∞–º—ã: \(bodyColor.rawValue)
        –í–µ—Å: \(weight.roundTo) –∫–≥.
        –†–∞–∑–≥–æ–Ω –¥–æ 100 –∫–º.—á.: \(accelerationTime.roundTo) —Å–µ–∫.
        –ú–∞–∫–º–∏–º–∞–ª—å–Ω—ã–µ –æ–±–æ—Ä–æ—Ç—ã –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(maxRpm) –æ–±./–º–∏–Ω.

        """)
        
    }
}

class PassengerCar: Vehicle {
    var vehicleType: VehicleType
    var engineType: EngineType
    var producingCountry: ProducingCountry
    var bodyColor: BodyColor
    var weight: Double
    var numberOfAirbags: Int
    var engineLaout: EngineLayout
    init(vehicleType: VehicleType, engineType: EngineType, producingCountry: ProducingCountry, bodyColor: BodyColor, weight: Double, numberOfAirBags: Int, engineLayout: EngineLayout) {
        self.vehicleType = vehicleType
        self.engineType = engineType
        self.producingCountry = producingCountry
        self.bodyColor = bodyColor
        self.weight = weight
        self.numberOfAirbags = numberOfAirBags
        self.engineLaout = engineLayout
    }
    func printDesctiption() {
        print("""
        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(engineType.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry.rawValue)
        –¶–≤–µ—Ç –∫—É–∑–æ–≤–∞: \(bodyColor.rawValue)
        –í–µ—Å: \(weight.roundTo) –∫–≥.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—É—à–µ–∫: \(numberOfAirbags) —à—Ç.
        –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(engineLaout.rawValue)

        """)
    }
}

class TruckCar: Vehicle {
    var vehicleType: VehicleType
    var engineType: EngineType
    var producingCountry: ProducingCountry
    var bodyColor: BodyColor
    var weight: Double
    var loadCapacity: Double
    var numberOfAxles: Int
    init(vehicleType: VehicleType, engineType: EngineType, producingCountry: ProducingCountry, bodyColor: BodyColor, weight: Double, loadCapacity: Double, numberOfAxles: Int) {
        self.vehicleType = vehicleType
        self.engineType = engineType
        self.producingCountry = producingCountry
        self.bodyColor = bodyColor
        self.weight = weight
        self.loadCapacity = loadCapacity
        self.numberOfAxles = numberOfAxles
    }
    func printDesctiption() {
        print("""
        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(engineType.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry.rawValue)
        –¶–≤–µ—Ç –∫—É–∑–æ–≤–∞: \(bodyColor.rawValue)
        –í–µ—Å: \(weight.roundTo) –∫–≥.
        –ì—Ä—É–∑–æ–ø–æ–¥—ä–µ–º–Ω–æ—Å—Ç—å: \(loadCapacity.roundTo) –∫–≥.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Å–µ–π: \(numberOfAxles) —à—Ç.

        """)
    }
}

class Plane: Vehicle {
    var vehicleType: VehicleType
    var engineType: EngineType
    var producingCountry: ProducingCountry
    var bodyColor: BodyColor
    var weight: Double
    var passangerCapacity: Int
    var numberOfEngines: Int
    init(vehicleType: VehicleType, engineType: EngineType, producingCountry: ProducingCountry, bodyColor: BodyColor, weight: Double, passangerCapacity: Int, numberOfEngines: Int) {
        self.vehicleType = vehicleType
        self.engineType = engineType
        self.producingCountry = producingCountry
        self.bodyColor = bodyColor
        self.weight = weight
        self.passangerCapacity = passangerCapacity
        self.numberOfEngines = numberOfEngines
    }
    func printDesctiption() {
        print("""
        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(engineType.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry.rawValue)
        –¶–≤–µ—Ç —Ñ—é–∑–µ–ª—è–∂–∞: \(bodyColor.rawValue)
        –í–µ—Å: \(weight.roundTo) –∫–≥.
        –ü–∞—Å—Å–∞–∂–∏—Ä–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: \(passangerCapacity) —á–µ–ª.
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–≤–∏–≥–∞—Ç–µ–ª–µ–π \(numberOfEngines) —à—Ç.

        """)
    }
}

class Ship: Vehicle {
    var vehicleType: VehicleType
    var engineType: EngineType
    var producingCountry: ProducingCountry
    var bodyColor: BodyColor
    var weight: Double
    var displacementTonnage: Double
    var cruisingRange: Int
    init(vehicleType: VehicleType, engineType: EngineType, producingCountry: ProducingCountry, bodyColor: BodyColor, weight: Double, displacementTonnage: Double, cruisingRange: Int) {
        self.vehicleType = vehicleType
        self.engineType = engineType
        self.producingCountry = producingCountry
        self.bodyColor = bodyColor
        self.weight = weight
        self.displacementTonnage = displacementTonnage
        self.cruisingRange = cruisingRange
    }
    func printDesctiption() {
        print("""
        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(engineType.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry.rawValue)
        –¶–≤–µ—Ç –∫–æ—Ä–ø—É—Å–∞: \(bodyColor.rawValue)
        –í–µ—Å: \(weight.roundTo) –∫–≥.
        –í–æ–¥–æ–∏–∑–º–µ—â–µ–Ω–∏–µ: \((displacementTonnage / 1000).roundTo) —Ç.
        –ó–∞–ø–∞—Å —Ö–æ–¥–∞: \(cruisingRange) –∫–º.

        """)
    }
}

class Locomotive: Vehicle {
    var vehicleType: VehicleType
    var engineType: EngineType
    var producingCountry: ProducingCountry
    var bodyColor: BodyColor
    var weight: Double
    var voltage: Voltage
    var trackWidth: TrackWidth
    init(vehicleType: VehicleType, engineType: EngineType, producingCountry: ProducingCountry, bodyColor: BodyColor, weight: Double, voltage: Voltage, trackWidth: TrackWidth) {
        self.vehicleType = vehicleType
        self.engineType = engineType
        self.producingCountry = producingCountry
        self.bodyColor = bodyColor
        self.weight = weight
        self.voltage = voltage
        self.trackWidth = trackWidth
    }
    func printDesctiption() {
        print("""
        –¢–∏–ø –¢–°: \(vehicleType.rawValue)
        –¢–∏–ø –¥–≤–∏–≥–∞—Ç–µ–ª—è: \(engineType.rawValue)
        –°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: \(producingCountry.rawValue)
        –¶–≤–µ—Ç –∫–æ—Ä–ø—É—Å–∞: \(bodyColor.rawValue)
        –í–µ—Å: \(weight.roundTo) –∫–≥.
        –ù–∞–ø—Ä—è–∂–µ–Ω–∏–µ —Å–µ—Ç–∏: \(voltage.rawValue)
        –ö–æ–ª–µ—è: \(trackWidth.rawValue) –º–º.

        """)
    }
}

struct Stack<T: Weightable> {
    private var elements: [T] = []
    mutating func push(_ element: T) {
        elements.append(element)
    }
    mutating func pop() -> T? {
        return elements.removeLast()
    }
    var totalWeight: Double {
        var weight = 0.0
        for element in elements {
            weight += element.weight
        }
        return weight
    }
    subscript(indices: Int ...) -> Double {
        var weight = 0.0
        for index in indices where index < self.elements.count {
            weight += self.elements[Int(index)].weight
        }
        return weight
    }
}

var motorcycleStack = Stack<Motorcycle>()
var passengerCarStack = Stack<PassengerCar>()
var truckCarStack = Stack<TruckCar>()
var planeStack = Stack<Plane>()
var shipStack = Stack<Ship>()
var locomotiveStack = Stack<Locomotive>()

var arrayMotorcycle:Array<Motorcycle> = []
var arrayPassengerCar:Array<PassengerCar> = []
var arrayTruckCar:Array<TruckCar> = []
var arrayPlane:Array<Plane> = []
var arrayShip:Array<Ship> = []
var arrayLocomotive:Array<Locomotive> = []

func makeVehicles() {
    var motorcycleStartCount = 0
    let motorCycleEndCount = Int.random(in: 1...10)
    var passengerCarStartCount = 0
    let passengerCarEndCount = Int.random(in: 1...10)
    var truckCarStartCount = 0
    let truckCarEndCount = Int.random(in: 1...10)
    var planeStartCount = 0
    let planeEndCount = Int.random(in: 1...10)
    var shipStartCount = 0
    let shipEndCount = Int.random(in: 1...10)
    var locomotiveStartCount = 0
    let locomotiveEndCount = Int.random(in: 1...10)
    print("–°–æ–∑–¥–∞–µ–º \(motorCycleEndCount) –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤...\n")
    sleep(1)
    repeat {
        let motorcycle = Motorcycle(vehicleType: .motorcycle, engineType: .gasoline, producingCountry: .setRandomProducingCountry(), bodyColor: .setRandomBodyColor(), weight: Double.random(in: 98.69...156.54), accelerationTime: Double.random(in: 2.6...11.69), maxRpm: Int.random(in: 7000...16000))
        arrayMotorcycle.append(motorcycle)
        motorcycleStartCount += 1
    } while motorcycleStartCount < motorCycleEndCount
    print("–°–æ–∑–¥–∞–µ–º \(passengerCarEndCount) –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...\n")
    sleep(1)
    repeat {
        let passengerCar = PassengerCar(vehicleType: .passangercar, engineType: .gasoline, producingCountry: .setRandomProducingCountry(), bodyColor: .setRandomBodyColor(), weight: Double.random(in: 1265.98...2452.85), numberOfAirBags: Int.random(in: 1...4), engineLayout: .setRandomEngineLayout())
        arrayPassengerCar.append(passengerCar)
        passengerCarStartCount += 1
    } while passengerCarStartCount < passengerCarEndCount
    print("–°–æ–∑–¥–∞–µ–º \(truckCarEndCount) –≥—Ä—É–∑–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π...\n")
    sleep(1)
    repeat {
        let truckCar = TruckCar(vehicleType: .truckCar, engineType: .diesel, producingCountry: .setRandomProducingCountry(), bodyColor: .setRandomBodyColor(), weight: Double.random(in: 8954.96...24589.54), loadCapacity: Double.random(in: 2458.97...19965.95), numberOfAxles: Int.random(in: 2...6))
        arrayTruckCar.append(truckCar)
        truckCarStartCount += 1
    } while truckCarStartCount < truckCarEndCount
    print("–°–æ–∑–¥–∞–µ–º \(planeEndCount) —Å–∞–º–æ–ª–µ—Ç–æ–≤...\n")
    sleep(1)
    repeat {
        let plane = Plane(vehicleType: .plane, engineType: .jet, producingCountry: .setRandomProducingCountry(), bodyColor: .setRandomBodyColor(), weight: Double.random(in: 124125.65...238654.98), passangerCapacity: Int.random(in: 50...234), numberOfEngines: Int.random(in: 1...4))
        arrayPlane.append(plane)
        planeStartCount += 1
    } while planeStartCount < planeEndCount
    print("–°–æ–∑–¥–∞–µ–º \(shipEndCount) –∫–æ—Ä–∞–±–ª–µ–π...\n")
    sleep(1)
    repeat {
        let ship = Ship(vehicleType: .ship, engineType: .nuclear, producingCountry: .setRandomProducingCountry(), bodyColor: .setRandomBodyColor(), weight: Double.random(in: 401259.654...8544589.45), displacementTonnage: Double.random(in: 401259.654...8544589.45), cruisingRange: 11256)
        arrayShip.append(ship)
        shipStartCount += 1
    } while shipStartCount < shipEndCount
    print("–°–æ–∑–¥–∞–µ–º \(locomotiveEndCount) —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–æ–≤...\n")
    sleep(1)
    repeat {
        let locomotive = Locomotive(vehicleType: .locomotive, engineType: .electric, producingCountry: .setRandomProducingCountry(), bodyColor: .setRandomBodyColor(), weight: Double.random(in: 401259.654...544589.45) , voltage: .setRandomVoltage(), trackWidth: .setRandomTrackWidth())
        arrayLocomotive.append(locomotive)
        locomotiveStartCount += 1
    } while locomotiveStartCount < locomotiveEndCount
}

func addVehiclesToStack() {
    print("–î–æ–±–∞–≤–ª—è–µ–º –º–æ—Ç–æ—Ü–∏–∫–ª—ã –≤ —Å—Ç–µ–∫...")
    sleep(1)
    for count in arrayMotorcycle {
        motorcycleStack.push(count)
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayMotorcycle.count) –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ –≤ —Å—Ç–µ–∫–µ\n")
    print("–î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –≤ —Å—Ç–µ–∫...")
    sleep(1)
    for count in arrayPassengerCar {
        passengerCarStack.push(count)
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayPassengerCar.count) –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –≤ —Å—Ç–µ–∫–µ\n")
    print("–î–æ–±–∞–≤–ª—è–µ–º –≥—Ä—É–∑–æ–≤–∏–∫–∏ –≤ —Å—Ç–µ–∫...")
    sleep(1)
    for count in arrayTruckCar {
        truckCarStack.push(count)
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayTruckCar.count) –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –≤ —Å—Ç–µ–∫–µ\n")
    print("–î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º–æ–ª–µ—Ç—ã –≤ —Å—Ç–µ–∫...")
    sleep(1)
    for count in arrayPlane {
        planeStack.push(count)
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayPlane.count) —Å–∞–º–æ–ª–µ—Ç–æ–≤ –≤ —Å—Ç–µ–∫–µ\n")
    print("–î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–∞–±–ª–∏ –≤ —Å—Ç–µ–∫...")
    sleep(1)
    for count in arrayShip {
        shipStack.push(count)
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayShip.count) –∫–æ—Ä–∞–±–ª–µ–π –≤ —Å—Ç–µ–∫–µ\n")
    print("–î–æ–±–∞–≤–ª—è–µ–º —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑—ã –≤ —Å—Ç–µ–∫...")
    sleep(1)
    for count in arrayLocomotive {
        locomotiveStack.push(count)
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayLocomotive.count) —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–æ–≤ –≤ —Å—Ç–µ–∫–µ\n")
}

func removeVehiclesFromStack() {
    print("–£–¥–∞–ª—è–µ–º –º–æ—Ç–æ—Ü–∏–∫–ª—ã –∏–∑ —Å—Ç–µ–∫–∞...")
    sleep(1)
    for _ in arrayMotorcycle {
        motorcycleStack.pop()
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayMotorcycle.count) –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å—Ç–µ–∫–∞\n")
    print("–£–¥–∞–ª—è–µ–º –ª–µ–≥–∫–æ–≤—ã–µ –∞–≤—Ç–æ–º–æ–±–∏–ª–∏ –∏–∑ —Å—Ç–µ–∫–∞...")
    sleep(1)
    for _ in arrayPassengerCar {
        passengerCarStack.pop()
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayPassengerCar.count) –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å—Ç–µ–∫–∞\n")
    print("–£–¥–∞–ª—è–µ–º –≥—Ä—É–∑–æ–≤–∏–∫–∏ –∏–∑ —Å—Ç–µ–∫–∞...")
    sleep(1)
    for _ in arrayTruckCar {
        truckCarStack.pop()
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayTruckCar.count) –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å—Ç–µ–∫–∞\n")
    print("–£–¥–∞–ª—è–µ–º —Å–∞–º–æ–ª–µ—Ç—ã –∏–∑ —Å—Ç–µ–∫–∞...")
    sleep(1)
    for _ in arrayPlane {
        planeStack.pop()
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayPlane.count) —Å–∞–º–æ–ª–µ—Ç–æ–≤ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å—Ç–µ–∫–∞\n")
    print("–£–¥–∞–ª—è–µ–º –∫–æ—Ä–∞–±–ª–∏ –∏–∑ —Å—Ç–µ–∫–∞...")
    sleep(1)
    for _ in arrayShip {
        shipStack.pop()
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayShip.count) –∫–æ—Ä–∞–±–ª–µ–π –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å—Ç–µ–∫–∞\n")
    print("–£–¥–∞–ª—è–µ–º —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑—ã –∏–∑ —Å—Ç–µ–∫–∞...")
    sleep(1)
    for _ in arrayLocomotive {
        locomotiveStack.pop()
    }
    print("–ì–æ—Ç–æ–≤–æ! \(arrayLocomotive.count) —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–æ–≤ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å—Ç–µ–∫–∞\n")
}

func printDescription() {
    var count = 0
    for _ in arrayMotorcycle {
        arrayMotorcycle[count].printDesctiption()
        count += 1
    }
    print("---")
    sleep(1)
    count = 0
    for _ in arrayPassengerCar {
        arrayPassengerCar[count].printDesctiption()
        count += 1
    }
    print("---")
    sleep(1)
    count = 0
    for _ in arrayTruckCar {
        arrayTruckCar[count].printDesctiption()
        count += 1
    }
    print("---")
    sleep(1)
    count = 0
    for _ in arrayPlane {
        arrayPlane[count].printDesctiption()
        count += 1
    }
    print("---")
    sleep(1)
    count = 0
    for _ in arrayShip {
        arrayShip[count].printDesctiption()
        count += 1
    }
    print("---")
    sleep(1)
    count = 0
    for _ in arrayLocomotive {
        arrayLocomotive[count].printDesctiption()
        count += 1
    }
    sleep(1)
}

func totalStackWeight() {
    print("–°—á–∏—Ç–∞–µ–º –≤–µ—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –°–¢–ï–ö–ï (subscript)...")
    sleep(2)
    var count = 0
    var stackMotorcycleWeightArray = [Double]()
    for _ in arrayMotorcycle {
        stackMotorcycleWeightArray.append(motorcycleStack[count])
        count += 1
    }
    let stackMotorcycleWeight = stackMotorcycleWeightArray.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(count) –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ \(stackMotorcycleWeight.roundTo) –∫–≥.")
    count = 0
    var stackPassengerCarWeightArray = [Double]()
    for _ in arrayPassengerCar {
        stackPassengerCarWeightArray.append(passengerCarStack[count])
        count += 1
    }
    let stackPassangerCarWeight = stackPassengerCarWeightArray.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(count) –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π \(stackPassangerCarWeight.roundTo) –∫–≥.")
    count = 0
    var stackTruckCarWeightArray = [Double]()
    for _ in arrayTruckCar {
        stackTruckCarWeightArray.append(truckCarStack[count])
        count += 1
    }
    let stackTruckCarWeight = stackTruckCarWeightArray.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(count) –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ \(stackTruckCarWeight.roundTo) –∫–≥.")
    count = 0
    var stackPlaneWeightArray = [Double]()
    for _ in arrayPlane {
        stackPlaneWeightArray.append(planeStack[count])
        count += 1
    }
    let stackPlaneWeight = stackPlaneWeightArray.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(count) —Å–∞–º–æ–ª–µ—Ç–æ–≤ \(stackPlaneWeight.roundTo) –∫–≥.")
    count = 0
    var stackShipWeightArray = [Double]()
    for _ in arrayShip {
        stackShipWeightArray.append(shipStack[count])
        count += 1
    }
    let stackShipWeight = stackShipWeightArray.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(count) –∫–æ—Ä–∞–±–ª–µ–π \(stackShipWeight.roundTo) –∫–≥.")
    count = 0
    var stackLocomotiveWeightArray = [Double]()
    for _ in arrayLocomotive {
        stackLocomotiveWeightArray.append(locomotiveStack[count])
        count += 1
    }
    let stackLocomotiveWeight = stackLocomotiveWeightArray.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(count) —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–æ–≤ \(stackLocomotiveWeight.roundTo) –∫–≥.")
    print("""

    –û–±—â–∏–π –≤–µ—Å \(arrayMotorcycle.count + arrayPassengerCar.count + arrayTruckCar.count + arrayPlane.count + arrayShip.count + arrayLocomotive.count) —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –°–¢–ï–ö–ï (subscript): \((stackMotorcycleWeight + stackPassangerCarWeight + stackTruckCarWeight + stackPlaneWeight + stackShipWeight + stackLocomotiveWeight).roundTo) –∫–≥.

    """)
}

func sortMotorcycleWeight() {
    var count = 0
    var arrayWeight = [Double]()
    print("–ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayMotorcycle {
        arrayWeight.append(arrayMotorcycle[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 < $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –º–æ—Ç–æ—Ü–∏–∫–ª–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
    count = 0
    arrayWeight = [Double]()
    print("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayMotorcycle {
        arrayWeight.append(arrayMotorcycle[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 > $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –º–æ—Ç–æ—Ü–∏–∫–ª–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
}

func sortPassengerCarWeight() {
    var count = 0
    var arrayWeight = [Double]()
    print("–ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayPassengerCar {
        arrayWeight.append(arrayPassengerCar[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 < $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –∞–≤—Ç–æ–º–∞—à–∏–Ω—ã: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
    count = 0
    arrayWeight = [Double]()
    print("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayPassengerCar {
        arrayWeight.append(arrayPassengerCar[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 > $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –∞–≤—Ç–æ–º–∞—à–∏–Ω—ã: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
}

func sortTruckCarWeight() {
    var count = 0
    var arrayWeight = [Double]()
    print("–ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayTruckCar {
        arrayWeight.append(arrayTruckCar[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 < $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –≥—Ä—É–∑–æ–≤–∏–∫–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
    count = 0
    arrayWeight = [Double]()
    print("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å –≥—Ä—É–∑–æ–≤–∏–∫–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayTruckCar {
        arrayWeight.append(arrayTruckCar[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 > $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –≥—Ä—É–∑–æ–≤–∏–∫–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
}

func sortPlaneWeight() {
    var count = 0
    var arrayWeight = [Double]()
    print("–ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å —Å–∞–º–æ–ª–µ—Ç–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayPlane {
        arrayWeight.append(arrayPlane[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 < $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) —Å–∞–º–æ–ª–µ—Ç–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
    count = 0
    arrayWeight = [Double]()
    print("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å —Å–∞–º–æ–ª–µ—Ç–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayPlane {
        arrayWeight.append(arrayPlane[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 > $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) —Å–∞–º–æ–ª–µ—Ç–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
}

func sortShipWeight() {
    var count = 0
    var arrayWeight = [Double]()
    print("–ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å –∫–æ—Ä–∞–±–ª–µ–π –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayShip {
        arrayWeight.append(arrayShip[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 < $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –∫–æ—Ä–∞–±–ª—è: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
    count = 0
    arrayWeight = [Double]()
    print("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å –∫–æ—Ä–∞–±–ª–µ–π –ø–æ —É–±—ã–≤–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayShip {
        arrayWeight.append(arrayShip[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 > $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) –∫–æ—Ä–∞–±–ª—è: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
}

func sortLocomotiveWeight() {
    var count = 0
    var arrayWeight = [Double]()
    print("–ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–æ–≤ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayLocomotive {
        arrayWeight.append(arrayLocomotive[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 < $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
    count = 0
    arrayWeight = [Double]()
    print("–ê —Ç–µ–ø–µ—Ä—å –æ—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –≤–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–æ–≤ –ø–æ —É–±—ã–≤–∞–Ω–∏—é...")
    sleep(1)
    for _ in arrayLocomotive {
        arrayWeight.append(arrayLocomotive[count].weight)
        count += 1
    }
    arrayWeight.sort { $0 > $1 }
    count = 0
    for _ in arrayWeight {
        print("–í–µ—Å \(count + 1) —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–∞: \(arrayWeight[count].roundTo) –∫–≥.")
        count += 1
    }
    print("")
}

func totalArrayWeight() {
    print("–°—á–∏—Ç–∞–µ–º –≤–µ—Å —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –ú–ê–°–°–ò–í–ï (–§–í–ü)...")
    sleep(2)
    var count = 0
    var arrayMotorcycleWeight = [Double]()
    for _ in arrayMotorcycle {
        arrayMotorcycleWeight.append(arrayMotorcycle[count].weight)
        count += 1
    }
    let totalMotorcycleWeight = arrayMotorcycleWeight.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(arrayMotorcycle.count) –º–æ—Ç–æ—Ü–∏–∫–ª–æ–≤ \(totalMotorcycleWeight.roundTo) –∫–≥.")
    count = 0
    var arrayPassengerCarWeight = [Double]()
    for _ in arrayPassengerCar {
        arrayPassengerCarWeight.append(arrayPassengerCar[count].weight)
        count += 1
    }
    let totalPassengerCarWeight = arrayPassengerCarWeight.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(arrayPassengerCar.count) –ª–µ–≥–∫–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π \(totalPassengerCarWeight.roundTo) –∫–≥.")
    count = 0
    var arrayTruckCarWeight = [Double]()
    for _ in arrayTruckCar {
        arrayTruckCarWeight.append(arrayTruckCar[count].weight)
        count += 1
    }
    let totalTruckCarWeight = arrayTruckCarWeight.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(arrayTruckCar.count) –≥—Ä—É–∑–æ–≤—ã—Ö –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π \(totalTruckCarWeight.roundTo) –∫–≥.")
    count = 0
    var arrayPlaneWeight = [Double]()
    for _ in arrayPlane {
        arrayPlaneWeight.append(arrayPlane[count].weight)
        count += 1
    }
    let totalPlaneWeight = arrayPlaneWeight.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(arrayPlane.count) —Å–∞–º–æ–ª–µ—Ç–æ–≤ \(totalPlaneWeight.roundTo) –∫–≥.")
    count = 0
    var arrayShipWeight = [Double]()
    for _ in arrayShip {
        arrayShipWeight.append(arrayShip[count].weight)
        count += 1
    }
    let totalShipWeight = arrayShipWeight.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(arrayShip.count) –∫–æ—Ä–∞–±–ª–µ–π \(totalShipWeight.roundTo) –∫–≥.")
    count = 0
    var arrayLocomotiveWeight = [Double]()
    for _ in arrayLocomotive {
        arrayLocomotiveWeight.append(arrayLocomotive[count].weight)
        count += 1
    }
    let totalLocomotiveWeight = arrayLocomotiveWeight.reduce(0) { $0 + $1 }
    print("–í–µ—Å \(arrayLocomotive.count) —ç–ª–µ–∫—Ç—Ä–æ–≤–æ–∑–æ–≤ \(totalLocomotiveWeight.roundTo) –∫–≥.")
    print("""

    –û–±—â–∏–π –≤–µ—Å \(arrayMotorcycle.count + arrayPassengerCar.count + arrayTruckCar.count + arrayPlane.count + arrayShip.count + arrayLocomotive.count) —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –≤ –º–∞—Å—Å–∏–≤–µ (–§–í–ü): \((totalMotorcycleWeight + totalPassengerCarWeight + totalTruckCarWeight + totalPlaneWeight + totalShipWeight + totalLocomotiveWeight).roundTo) –∫–≥.

    """)
}

func removeVehiclesFromArray() {
    print("–£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∏–∑ —Å–≤–æ–∏—Ö –º–∞—Å—Å–∏–≤–æ–≤...")
    sleep(2)
    arrayMotorcycle.removeAll()
    arrayPassengerCar.removeAll()
    arrayTruckCar.removeAll()
    arrayPlane.removeAll()
    arrayShip.removeAll()
    arrayLocomotive.removeAll()
    print("–ì–æ—Ç–æ–≤–æ!\n")
    
}

func checkNil() {
    print("–í–æ–∑–≤—Ä–∞—â–∞–µ–º nil —Å –ø–æ–º–æ—â—å—é subscript...")
    sleep(2)
    print("–ú–∞—Å—Å–∏–≤ –ú–æ—Ç–æ—Ü–∏–∫–ª—ã –ø—É—Å—Ç–æ–π \(arrayMotorcycle), –≤ –ª—é–±–æ–º –∏–Ω–¥–µ–∫—Å–µ: \(String(describing: arrayMotorcycle[safe: 0]?.vehicleType.rawValue))")
    print("–ú–∞—Å—Å–∏–≤ –õ–µ–≥–∫–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—É—Å—Ç–æ–π \(arrayPassengerCar), –≤ –ª—é–±–æ–º –∏–Ω–¥–µ–∫—Å–µ: \(String(describing: arrayPassengerCar[safe: 0]?.vehicleType.rawValue))")
    print("–ú–∞—Å—Å–∏–≤ –ì—Ä—É–∑–æ–≤–æ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å –ø—É—Å—Ç–æ–π \(arrayTruckCar), –≤ –ª—é–±–æ–º –∏–Ω–¥–µ–∫—Å–µ: \(String(describing: arrayTruckCar[safe: 0]?.vehicleType.rawValue))")
    print("–ú–∞—Å—Å–∏–≤ –°–∞–º–æ–ª–µ—Ç –ø—É—Å—Ç–æ–π \(arrayPlane), –≤ –ª—é–±–æ–º –∏–Ω–¥–µ–∫—Å–µ: \(String(describing: arrayPlane[safe: 0]?.vehicleType.rawValue))")
    print("–ú–∞—Å—Å–∏–≤ –ö–æ—Ä–∞–±–ª—å –ø—É—Å—Ç–æ–π \(arrayShip), –≤ –ª—é–±–æ–º –∏–Ω–¥–µ–∫—Å–µ: \(String(describing: arrayShip[safe: 0]?.vehicleType.rawValue))")
    print("–ú–∞—Å—Å–∏–≤ –≠–ª–µ–∫—Ç—Ä–æ–≤–æ–∑ –ø—É—Å—Ç–æ–π \(arrayLocomotive), –≤ –ª—é–±–æ–º –∏–Ω–¥–µ–∫—Å–µ: \(String(describing: arrayLocomotive[safe: 0]?.vehicleType.rawValue))\n")
}

func startThisShit() {
    makeVehicles()
    printDescription()
    addVehiclesToStack()
    totalStackWeight()
    removeVehiclesFromStack()
    sortMotorcycleWeight()
    sortPassengerCarWeight()
    sortTruckCarWeight()
    sortPlaneWeight()
    sortShipWeight()
    sortLocomotiveWeight()
    totalArrayWeight()
    removeVehiclesFromArray()
    checkNil()
}

startThisShit()
